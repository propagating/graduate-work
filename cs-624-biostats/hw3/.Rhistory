knitr::opts_chunk$set(echo = TRUE)
d = get(data(BostonHousing))
knitr::opts_chunk$set(echo = TRUE)
library(MASS)
library(ISLR)
install.packages("ISLR")
summary(Boston)
data = Boston
data$chas = as.factor(data$chas)
medianThreshold = quantile(data$medv, c(0.25, 0.75))
medianThreshold = as.vector(quantile(data$medv, c(0.25, 0.75)))
medianThreshold[1]
data = Boston
data$chas = as.factor(data$chas)
medianThreshold = as.vector(quantile(data$medv, c(0.25, 0.75)))
d$medianValue = 1
data$medianValue = 1
if(data$medv < medianThreshold[1]) data$medianValue = 0
if(data$medv > medianThreshold[2]) data$medianValue = 2
View(data)
if(data$medv < medianThreshold[1]) {data$medianValue = 0}
if(data$medv > medianThreshold[2]) {data$medianValue = 2}
data$medianValue = 1
if(data$medv < medianThreshold[[1]]) {data$medianValue = 0}
if(data$medv > medianThreshold[[2]]) {data$medianValue = 2}
data[medv < medianThreshold[1], "medianValue" = 0]
data[medv < medianThreshold[1], medianValue := 0]
data[medv < medianThreshold[1], medianValue = 0]
View(data)
knitr::opts_chunk$set(echo = TRUE)
library(MASS)
library(ISLR)
data$medianValue cut(data$medv, c(0, medianThreshold[1], medianThreshold[2]))
data$medianValue = cut(data$medv, c(0, medianThreshold[1], medianThreshold[2]))
levels(data$medianValue)
data$medianValue = cut(data$medv, c(0, medianThreshold[1], medianThreshold[2], max(med$v)))
data$medianValue = cut(data$medv, c(0, medianThreshold[1], medianThreshold[2], max(data$medv)))
levels(data$medianValue)
medianThreshold = as.vector(quantile(data$medv, c(0.25, 0.75)))
data$medianValue = cut(data$medv, c(medianThreshold[1], medianThreshold[2]))
levels(data$medianValue)
data$medianValue = cut(data$medv, c(0, medianThreshold[1], medianThreshold[2], max(medv)))
data$medianValue = cut(data$medv, c(0, medianThreshold[1], medianThreshold[2], max(data$medv)))
levels(data$medianValue)
data$medianValue = as.factor(cut(data$medv, c(0, medianThreshold[1], medianThreshold[2], max(data$medv))))
levels(data$medianValue)
data$medianValue = cut(data$medv, c(0, medianThreshold[1], medianThreshold[2], max(data$medv)), c("low", "medium", "high"))
levels(data$medianValue)
baseModel <- vglm(medianValue~., family=multinomial, data = data)
install.packages("VGAM")
knitr::opts_chunk$set(echo = TRUE)
library(MASS)
library(VGAM)
baseModel <- vglm(medianValue~., family=multinomial, data = data)
summary(baseModel)
baseModel <- vglm(medianValue~., family=multinomial, data = data)
summary(baseModel)
model1 <- vglm(medv_cat~., family=multinomial,data=d)
baseModel <- vglm(medianValue~., family=multinomial, data = data[-c("medv")])
baseModel <- vglm(medianValue~., family=multinomial, data = data[,-c("medv")])
summary(baseModel)
baseModel <- vglm(medianValue~., family=multinomial, data = data[,!"medv"])
baseModel <- vglm(medianValue~., family=multinomial, data = houseData[,-c(14)])
baseModel <- vglm(medianValue~., family=multinomial, data = houseData[,-c(13)])
summary(Boston)
houseData = Boston
houseData$chas = as.factor(houseData$chas)
medianThreshold = as.vector(quantile(houseData$medv, c(0.25, 0.75)))
houseData$medianValue = cut(houseData$medv, c(0, medianThreshold[1], medianThreshold[2], max(houseData$medv)), c("low", "medium", "high"))
levels(houseData$medianValue)
baseModel <- vglm(medianValue~., family=multinomial, data = houseData[,-c(14)])
summary(baseModel)
step4(baseModel)
step4vglm(baseModel)
stepModel = step4vglm(baseModel)
stepModel$last
stepModel.last
summary(stepModel)
stepModel$coef
stepModel@post$coefs
stepModel@post
stepModel@last
step4vglm(baseModel)
bestModel <- vglm(formula = medianValue ~ crim + indus + nox + rm + age +
dis + rad + tax + ptratio + black + lstat, family = multinomial,
data = houseData[, -c(14)])
summar(bestModel)
baseModel <- vglm(medianValue~., family=multinomial, data = houseData[,-c(14)])
step4vglm(baseModel)
bestModel <- vglm(formula = medianValue ~ crim + indus + nox + rm + age +
dis + rad + tax + ptratio + black + lstat, family = multinomial,
data = houseData[, -c(14)])
summary(bestModel)
#Interpretations
#Note: "medv_cat Group 1" = low, "medv_cat Group 2" = medium, "medv_cat Group 3" = high
stats_descr <- data.frame(
"Var Name" = names(summary(model1)@coef3[,1]),
"Odds Ratio" = paste0(round(exp(summary(model1)@coef3[,1]),3)),
"Percent Odds Ratio" = paste0(round(((exp(summary(model1)@coef3[,1]))-1)*100,3),"%"),
"P-value" = paste0(signif(summary(model1)@coef3[,4],digits=4)),
"Status (A=0.05)" = paste0(ifelse(summary(model1)@coef3[,4] < 0.05,"significant","insignificant")),
"Sig Level" = paste0(ifelse(summary(model1)@coef3[,4] < 0.05 & summary(model1)@coef3[,4] > 0.01,"*",
ifelse(summary(model1)@coef3[,4] < 0.01 & summary(model1)@coef3[,4] > 0.001,"**",
ifelse(summary(model1)@coef3[,4] < 0.001,"***","")))),
check.names = FALSE)[-1,]
bestSummary <- summary(bestModel)
odds <- exp(bestSummary@coef3[,1])
odds
bestSummary
odds <- exp(bestSummary@coef3[,1])
odds
library(MASS)
library(VGAM)
d = Boston
d$chas = factor(d$chas)
threshold <- quantile(d$medv,c(.25,.75))
d$medv_cat = factor(ifelse(d$medv < threshold[[1]], "low", ifelse(d$medv > threshold[[2]],"high","medium")),levels = c("low", "medium", "high"))
d$medv = NULL
attach(d)
model1 <- vglm(medv_cat~., family=multinomial,data=d)
summary(model1) #reference is level 3, aka high medv_cat
#Interpretations
#Note: "medv_cat Group 1" = low, "medv_cat Group 2" = medium, "medv_cat Group 3" = high
stats_descr <- data.frame(
"Var Name" = names(summary(model1)@coef3[,1]),
"Odds Ratio" = paste0(round(exp(summary(model1)@coef3[,1]),3)),
"Percent Odds Ratio" = paste0(round(((exp(summary(model1)@coef3[,1]))-1)*100,3),"%"),
"P-value" = paste0(signif(summary(model1)@coef3[,4],digits=4)),
"Status (A=0.05)" = paste0(ifelse(summary(model1)@coef3[,4] < 0.05,"significant","insignificant")),
"Sig Level" = paste0(ifelse(summary(model1)@coef3[,4] < 0.05 & summary(model1)@coef3[,4] > 0.01,"*",
ifelse(summary(model1)@coef3[,4] < 0.01 & summary(model1)@coef3[,4] > 0.001,"**",
ifelse(summary(model1)@coef3[,4] < 0.001,"***","")))),
check.names = FALSE)[-1,]
#Now, observing only significant variables in Model 2, because there are so many to comment on:
sig_stats_descr =stats_descr[-which(stats_descr$`Status (A=0.05)`=="insignificant"),]
sig_stats_descr
nrow(sig_stats_descr) #14 variables were considered significant
yvar <- "medv_cat" #specified for dataframe formation
for (i in 1:nrow(sig_stats_descr)){
print(paste0("For every unit increase of the ",sub(":.*", "", sig_stats_descr[i,1])," variable, the odds of being in the ",yvar," ", ifelse(sub(".*:", "", sig_stats_descr[i,1]) == 1,"low","medium")," category vs the ",yvar, " high category are ",sig_stats_descr[i,2]," times ",ifelse(sig_stats_descr[i,2] >= 1,"higher","lower")))
#print(paste0("In other words, for the ",sig_stats_descr[i,1]," variable, the odds of ",yvar, " are ",ifelse(sig_stats_descr[i,3] >= 0,"increased","decreased")," by ",abs(as.numeric(sub("%", "",sig_stats_descr[i,3]))),"%."))
cat("\n")
}
