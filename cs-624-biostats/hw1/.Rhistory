revalue(tips$SEX, c("0" = "MALE", "1"  = "FEMALE"))
revalue(tips$SMOKER, c("0" = "NON-SMOKER", "1" = "SMOKER"))
tipPlot <- ggplot(tips, aes(TIP, TOTBILL, color = SEX)) + geom_point() + geom_smooth() + scale_color_manual(labels=c("MALE", "FEMALE"), values=c("blue", "red"))
tipPlot
tips$RATE = tips$TIP / tips$TOTBILL
sexPlot <- ggplot(tips, aes(RATE, SEX)) + geom_boxplot(aes(colour = SEX)) + scale_color_manual(labels=c("MALE", "FEMALE"), values = c("blue", "red")) + labs(x = "Tip Rate (% of Tip/Total Amount) ", y = "Sex of Patron") + scale_y_discrete(labels= c("Male", "Female")) + theme(legend.position = "none")
sexPlot
smokerPlot <- ggplot(tips, aes(RATE, SMOKER, color = SMOKER)) + geom_boxplot() + scale_color_manual(labels=c("MALE", "FEMALE"), values = c("blue", "red")) + labs(x = "Tip Rate (% of Tip/Total Amount) ", y = "Smoking Status")+ scale_y_discrete(labels= c("Non-Smoker", "Smoker")) + theme(legend.position = "none")
smokerPlot
smokerSexPlot <- ggplot(tips, aes(RATE, SMOKER, color = SEX)) + geom_boxplot() + scale_color_manual(labels=c("MALE", "FEMALE"), values = c("blue", "red")) +labs(x = "Tip Rate (% of Tip/Total Amount) ", y = "Smoking Status") + scale_y_discrete(labels= c("Non-Smoker", "Smoker"))
smokerSexPlot
tips = tips %>% mutate(PARTYGROUP = case_when(tips$SIZE < 3 ~ "1-2",tips$SIZE == 3 ~ "3",TRUE ~ "4-6"))
tips$PARTYGROUP = as.factor(tips$PARTYGROUP)
partyGroupTipRate <- ggplot(tips, aes(RATE, PARTYGROUP, color = TIME)) + geom_boxplot() + scale_color_manual(labels=c(""))
partyGroupTipRate
tips = tips %>% mutate(PARTYGROUP = case_when(tips$SIZE < 3 ~ "1-2",tips$SIZE == 3 ~ "3",TRUE ~ "4-6"))
tips$PARTYGROUP = as.factor(tips$PARTYGROUP)
partyGroupTipRate <- ggplot(tips, aes(RATE, PARTYGROUP, color = TIME)) + geom_boxplot() + scale_color_manual(labels=c("Evening", "Afternon"))
partyGroupTipRate
tips = tips %>% mutate(PARTYGROUP = case_when(tips$SIZE < 3 ~ "1-2",tips$SIZE == 3 ~ "3",TRUE ~ "4-6"))
tips$PARTYGROUP = as.factor(tips$PARTYGROUP)
partyGroupTipRate <- ggplot(tips, aes(RATE, PARTYGROUP, color = TIME)) + geom_boxplot() + scale_color_manual(labels=c("Evening", "Afternon"), values=c("Orange", "Blue"))
partyGroupTipRate
tips$PERSONTOTAL = tips$TOTBILL/tips$SIZE
partyGroupTotalBill <- ggplot(tips, aes(PERSONTOTAL, PARTYGROUP, color = TIME)) + geom_boxplot()
partyGroupTotalBill
knitr::opts_chunk$set(echo = TRUE)
library(ggplot2)
library(plyr)
library(dplyr)
tips = tips %>% mutate(PARTYGROUP = case_when(tips$SIZE < 3 ~ "1-2",tips$SIZE == 3 ~ "3",TRUE ~ "4-6"))
tips$PARTYGROUP = as.factor(tips$PARTYGROUP)
partyGroupTipRate = ggplot(tips, aes(RATE, PARTYGROUP, color = TIME)) + geom_boxplot() + scale_color_manual(labels = c("Evening", "Afternon"), values=c("Orange", "Blue"))
partyGroupTipRate
tips$PERSONTOTAL = tips$TOTBILL/tips$SIZE
partyGroupTotalBill <- ggplot(tips, aes(PERSONTOTAL, PARTYGROUP, color = TIME)) + geom_boxplot() + scale_color_manual(labels = c("Evening", "Afternon"), values=c("Orange", "Blue"))
partyGroupTotalBill
tips = tips %>% mutate(PARTYGROUP = case_when(tips$SIZE < 3 ~ "1-2",tips$SIZE == 3 ~ "3",TRUE ~ "4-6"))
tips$PARTYGROUP = as.factor(tips$PARTYGROUP)
partyGroupTipRate = ggplot(tips, aes(RATE, PARTYGROUP, color = TIME)) + geom_boxplot() + scale_color_manual(labels = c("Evening", "Afternon"), values=c("Orange", "Blue")) + xlim(0, 0.45)
partyGroupTipRate
tips$PERSONTOTAL = tips$TOTBILL/tips$SIZE
partyGroupTotalBill <- ggplot(tips, aes(PERSONTOTAL, PARTYGROUP, color = TIME)) + geom_boxplot() + scale_color_manual(labels = c("Evening", "Afternon"), values = c("Orange", "Blue")) + xlim(0, 0.45)
partyGroupTotalBill
tips = tips %>% mutate(PARTYGROUP = case_when(tips$SIZE < 3 ~ "1-2",tips$SIZE == 3 ~ "3",TRUE ~ "4-6"))
tips$PARTYGROUP = as.factor(tips$PARTYGROUP)
partyGroupTipRate = ggplot(tips, aes(RATE, PARTYGROUP, color = TIME)) + geom_boxplot() + scale_color_manual(labels = c("Evening", "Afternon"), values=c("Orange", "Blue"))
partyGroupTipRate
tips$PERSONTOTAL = tips$TOTBILL/tips$SIZE
partyGroupTotalBill <- ggplot(tips, aes(PERSONTOTAL, PARTYGROUP, color = TIME)) + geom_boxplot() + scale_color_manual(labels = c("Evening", "Afternon"), values = c("Orange", "Blue")) + xlim(0, 0.45)
partyGroupTotalBill
tips = tips %>% mutate(PARTYGROUP = case_when(tips$SIZE < 3 ~ "1-2",tips$SIZE == 3 ~ "3",TRUE ~ "4-6"))
tips$PARTYGROUP = as.factor(tips$PARTYGROUP)
partyGroupTipRate = ggplot(tips, aes(RATE, PARTYGROUP, color = TIME)) + geom_boxplot() + scale_color_manual(labels = c("Evening", "Afternon"), values=c("Orange", "Blue")) + xlim(0, 0.45)
partyGroupTipRate
tips$PERSONTOTAL = tips$TOTBILL/tips$SIZE
partyGroupTotalBill <- ggplot(tips, aes(PERSONTOTAL, PARTYGROUP, color = TIME)) + geom_boxplot() + scale_color_manual(labels = c("Evening", "Afternon"), values = c("Orange", "Blue"))
partyGroupTotalBill
tips = tips %>% mutate(PARTYGROUP = case_when(tips$SIZE < 3 ~ "1-2",tips$SIZE == 3 ~ "3",TRUE ~ "4-6"))
tips$PARTYGROUP = as.factor(tips$PARTYGROUP)
partyGroupTipRate = ggplot(tips, aes(RATE, PARTYGROUP, color = TIME)) + geom_boxplot() + scale_color_manual(labels = c("Evening", "Afternon"), values=c("Orange", "Blue")) + xlim(0, 0.4)
partyGroupTipRate
tips$PERSONTOTAL = tips$TOTBILL/tips$SIZE
partyGroupTotalBill <- ggplot(tips, aes(PERSONTOTAL, PARTYGROUP, color = TIME)) + geom_boxplot() + scale_color_manual(labels = c("Evening", "Afternon"), values = c("Orange", "Blue"))
partyGroupTotalBill
tipPlot <- ggplot(tips, aes(TIP, TOTBILL, color = SEX)) + geom_point() + geom_smooth() + scale_color_manual(labels=c("MALE", "FEMALE"), values=c("blue", "red"))
tipPlot
tips$RATE = tips$TIP / tips$TOTBILL
sexPlot <- ggplot(tips, aes(RATE, SEX)) + geom_boxplot(aes(colour = SEX)) + scale_color_manual(labels=c("MALE", "FEMALE"), values = c("blue", "red")) + labs(x = "Tip Rate (% of Tip/Total Amount) ", y = "Sex of Patron") + scale_y_discrete(labels= c("Male", "Female")) + theme(legend.position = "none")+ xlim(0, 0.4)
sexPlot
smokerPlot <- ggplot(tips, aes(RATE, SMOKER, color = SMOKER)) + geom_boxplot() + scale_color_manual(labels=c("MALE", "FEMALE"), values = c("blue", "red")) + labs(x = "Tip Rate (% of Tip/Total Amount) ", y = "Smoking Status")+ scale_y_discrete(labels= c("Non-Smoker", "Smoker")) + theme(legend.position = "none")+ xlim(0, 0.4)
smokerPlot
smokerSexPlot <- ggplot(tips, aes(RATE, SMOKER, color = SEX)) + geom_boxplot() + scale_color_manual(labels= c("MALE", "FEMALE"), values = c("blue", "red")) +labs(x = "Tip Rate (% of Tip/Total Amount) ", y = "Smoking Status") + scale_y_discrete(labels = c("Non-Smoker", "Smoker"))  + xlim(0, 0.4)
smokerSexPlot
knitr::opts_chunk$set(echo = TRUE)
library(dplyr)
library(ggplot2)
firstTest = data.frame("Method" = c("1","1","1","1","1","1"), "Score" = c(79,66,57,91,42,59))
secondTest = data.frame("Method" = c("2", "2", "2", "2", "2", "2"), "Score" = c(71,43,58,78,20,56))
firstTest$Method = as.factor(firstTest$Method)
secondTest$Method = as.factor(secondTest$Method)
shapiro.test(firstTest$Score)
shapiro.test(secondTest$Score)
hist(firstTest$Score)
hist(secondTest$Score)
t.test(firstTest$Score, secondTest$Score , paired = FALSE, conf.level = 0.99, mu = 0)
differences = firstTest$Score - secondTest$Score
shapiro.test(differences)
hist(differences)
t.test(firstTest$Score, secondTest$Score , paired = TRUE, conf.level = 0.99, mu = 0)
t.test(firstTest$Score, mu = 80)
library(foreign)
wcgs <- read.dta('data/wcgs.dta')
for(i in levels(wcgs$behpat)){
obs = wcgs[which(wcgs$behpat == i),]
print(i)
print(shapiro.test(obs$weight))
hist(obs$weight)
}
bartlett.test(wcgs$weight ~ wcgs$behpat)
library(ggplot2)
weightAnova = aov(weight ~ behpat, data=wcgs)
summary.aov(weightAnova)
ggplot(wcgs, aes(x=behpat, y=weight)) + geom_boxplot()
pairwise.t.test(wcgs$weight, wcgs$behpat, p.adjust = "bonferroni")
TukeyHSD(weightAnova)
kruskal.test(weight ~ behpat, data=wcgs)
library(foreign)
wcgs <- read.dta('data/wcgs.dta')
wcgs$typchd69 = as.factor(wcgs$typchd69)
for(i in levels(wcgs$typchd69)){
obs = wcgs[which(wcgs$typchd69 == i),]
print(i)
print(shapiro.test(obs$weight))
hist(obs$weight)
}
library(ggplot2)
weightAnova = aov(weight ~ typchd69, data=wcgs)
summary.aov(weightAnova)
ggplot(wcgs, aes(x=typchd69, y=weight)) + geom_boxplot()
pairwise.t.test(wcgs$weight, wcgs$typchd69, p.adjust = "bonferroni")
TukeyHSD(weightAnova)
kruskal.test(weight ~ typchd69, data=wcgs)
diets <- read.file('data/diets.txt')
diets <- read.table('data/diets.txt')
diets <- read.table('data/diets.txt', header=TRUE)
diets$Diet = as.factor(diets$Diet)
knitr::opts_chunk$set(echo = TRUE)
library(dplyr)
library(ggplot2)
bartlett.test(wcgs$weight ~ wcgs$typchd69)
```{r anovaAssumtpionTests}
bartlett.test(diets$WeightLoss ~ diets$Diet)
shapiro.test(diets$WeightLoss ~ diets$Diet)
shapiro.test(diets$WeightLoss)
bart
shap <- shapiro.test(diets$WeightLoss)
shap
bart <- bartlett.test(diets$WeightLoss ~ diets$Diet)
bart
shap <- byf.shapiro.test(diets$WeightLoss~diets$Diet)
install.packages("RVAideMemoire")
library(RVAideMemoire)
shap <- byf.shapiro.test(diets$WeightLoss~diets$Diet)
library(RVAideMemoire)
shap <- byf.shapiro(diets$WeightLoss~diets$Diet)
shap
bart <- bartlett.test(diets$WeightLoss ~ diets$Diet)
bart
library(RVAideMemoire)
shapiro <- shapiro.test(diets$WeightLoss)
shapiro
shapByFactor <- byf.shapiro(WeightLoss~Diet, data = diets)
shapByFactor
bart <- bartlett.test(WeightLoss ~ Diet, data = diets)
bart
tapply(diets$WeightLoss, diets$Diet, mean)
View(diets)
mean(tapply(diets$WeightLoss, diets$Diet, mean))
groupCounts <- tapply(diets$WeightLoss, diets$Diet, count)
groupCounts <- tapply(diets$WeightLoss, diets$Diet, len)
groupCounts <- tapply(diets$WeightLoss, diets$Diet, length)
sst =  groupCounts * (groupMeans - overallMeans)^2
groupMeans <- tapply(diets$WeightLoss, diets$Diet, mean)
groupCounts <- tapply(diets$WeightLoss, diets$Diet, length)
overallMeans <- mean(groupMeans)
sst =  groupCounts * (groupMeans - overallMeans)^2
sst =  sum(groupCounts * (groupMeans - overallMeans)^2)
mst = sst/len(levels(diets$Diet)-1)
mst = sst/length(levels(diets$Diet)-1)
mst = sst/length(levels(diets$Diet))-1
mst = sst/(length(levels(diets$Diet))-1)
groupMeans <- tapply(diets$WeightLoss, diets$Diet, mean)
groupCounts <- tapply(diets$WeightLoss, diets$Diet, length)
overallMeans <- mean(groupMeans)
sst =  sum(groupCounts * (groupMeans - overallMeans)^2)
mst = sst/(length(levels(diets$Diet))-1)
groupVariances =  tapply(diets$WeightLoss, diets$Diet, var)
sse = sum(groupVariances * (groupCounts - 1))
groupMeans <- tapply(diets$WeightLoss, diets$Diet, mean)
groupCounts <- tapply(diets$WeightLoss, diets$Diet, length)
overallMeans <- mean(groupMeans)
sst =  sum(groupCounts * (groupMeans - overallMeans)^2)
mst = sst/(length(levels(diets$Diet)) - 1)
groupVariances =  tapply(diets$WeightLoss, diets$Diet, var)
sse = sum(groupVariances * (groupCounts - 1))
mse = sse / (sum(groupCounts) - (length(levels(diets$Diet)) - 1))
fStat = mst/mse
pf(fstat, (length(levels(diets$Diet)) - 1), (sum(groupCounts) - (length(levels(diets$Diet)) - 1)))
pf(fStat, (length(levels(diets$Diet)) - 1), (sum(groupCounts) - (length(levels(diets$Diet)) - 1)))
groupMeans <- tapply(diets$WeightLoss, diets$Diet, mean)
groupMeans
groupCounts <- tapply(diets$WeightLoss, diets$Diet, length)
groupCounts
overallMeans <- mean(groupMeans)
overallMeans
sst =  sum(groupCounts * (groupMeans - overallMeans)^2)
sst
mst = sst/(length(levels(diets$Diet)) - 1)
mst
groupVariances =  tapply(diets$WeightLoss, diets$Diet, var)
groupVariances
sse = sum(groupVariances * (groupCounts - 1))
sse
mse = sse / (sum(groupCounts) - (length(levels(diets$Diet)) - 1))
mse
fStat = mst/mse
fStat
pf(fStat, (length(levels(diets$Diet)) - 1), (sum(groupCounts) - (length(levels(diets$Diet)) - 1)))
groupMeans <- tapply(diets$WeightLoss, diets$Diet, mean)
groupMeans
groupCounts <- tapply(diets$WeightLoss, diets$Diet, length)
groupCounts
overallMeans <- mean(groupMeans)
overallMeans
sst =  sum(groupCounts * (groupMeans - overallMeans)^2)
sst
mst = sst/(length(levels(diets$Diet)) - 1)
mst
groupVariances =  tapply(diets$WeightLoss, diets$Diet, var)
groupVariances
sse = sum(groupVariances * (groupCounts - 1))
sse
mse = sse / (sum(groupCounts) - (length(levels(diets$Diet)) - 1))
mse
fStat = mst/mse
fStat
pf(fStat, 3, 114)
pf(fStat, 114, 3)
aov(diets$WeightLoss ~ diets$Diet )
sst =  sum(groupCounts * ((groupMeans - overallMeans)^2))
groupMeans <- tapply(diets$WeightLoss, diets$Diet, mean)
groupMeans
groupCounts <- tapply(diets$WeightLoss, diets$Diet, length)
groupCounts
overallMeans <- mean(groupMeans)
overallMeans
sst =  sum(groupCounts * ((groupMeans - overallMeans)^2))
sst
mst = sst/(length(levels(diets$Diet)) - 1)
mst
groupVariances =  tapply(diets$WeightLoss, diets$Diet, var)
groupVariances
sse = sum(groupVariances * (groupCounts - 1))
sse
mse = sse / (sum(groupCounts) - (length(levels(diets$Diet)) - 1))
mse
fStat = mst/mse
fStat
pf(fStat, 114, 3)
aov(diets$WeightLoss ~ diets$Diet)
totalObservations = length(diets$WeightLoss)
totalLevels = length(levels(diets$Diet))
totalObservations = length(diets$WeightLoss)
totalLevels = length(levels(diets$Diet))
groupMeans <- tapply(diets$WeightLoss, diets$Diet, mean)
groupMeans
groupCounts <- tapply(diets$WeightLoss, diets$Diet, length)
groupCounts
overallMeans <- mean(groupMeans)
overallMeans
sst =  sum(groupCounts * ((groupMeans - overallMeans)^2))
sst
mst = sst/(totalLevels - 1)
mst
groupVariances =  tapply(diets$WeightLoss, diets$Diet, var)
groupVariances
sse = sum(groupVariances * (groupCounts - 1))
sse
mse = sse / (totalObservations - totalLevels)
mse
fStat = mst/mse
fStat
pf(fStat, 114, 3)
aov(diets$WeightLoss ~ diets$Diet)
totalObservations = length(diets$WeightLoss)
totalLevels = length(levels(diets$Diet))
groupMeans <- tapply(diets$WeightLoss, diets$Diet, mean)
groupMeans
groupCounts <- tapply(diets$WeightLoss, diets$Diet, length)
groupCounts
overallMeans <- mean(groupMeans)
overallMeans
sst =  sum(groupCounts * ((groupMeans - overallMeans)^2))
sst
mst = sst/(totalLevels - 1)
mst
groupVariances =  tapply(diets$WeightLoss, diets$Diet, var)
groupVariances
sse = sum(groupVariances * (groupCounts - 1))
sse
mse = sse / (totalObservations - totalLevels)
mse
fStat = mst/mse
fStat
pf(fStat, 114, 3)
aov(diets$WeightLoss ~ diets$Diet)
pf(fStat, 3, 114, lower.tail = FALSE, log.p = TRUE)
pf(fStat, 3, 114, lower.tail = FALSE)
pf(fStat, 114, 3, lower.tail = FALSE)
summary(dietAnova )
dietAnova = aov(WeightLoss ~ Diet, data = diets)
summary(dietAnova )
totalObservations = length(diets$WeightLoss)
totalLevels = length(levels(diets$Diet))
groupMeans <- tapply(diets$WeightLoss, diets$Diet, mean)
groupMeans
groupCounts <- tapply(diets$WeightLoss, diets$Diet, length)
groupCounts
overallMeans <- mean(groupMeans)
overallMeans
sst =  sum(groupCounts * ((groupMeans - overallMeans)^2))
sst
mst = sst/(totalLevels - 1)
mst
groupVariances =  tapply(diets$WeightLoss, diets$Diet, var)
groupVariances
sse = sum(groupVariances * (groupCounts - 1))
sse
mse = sse / (totalObservations - totalLevels)
mse
fStat = mst/mse
fStat
pf(fStat, 3, 114, lower.tail = FALSE)
dietAnova = aov(WeightLoss ~ Diet, data = diets)
summary(dietAnova )
TukeyHSD(dietAnova)
pairwise.t.test(WeightLoss, Diet, data = diets, p.adjust = "bonferroni")
pairwise.t.test(diets$WeightLoss, diets$Diet, p.adjust = "bonferroni")
pairwise.t.test(diets$WeightLoss, diets$Diet)
stringSeq = 'aabbaaaabbbaababbaaabbbbbababbbabbb'
inputSeq = as.list(strsplit(stringSeq, "")[[1]])
stringSeq = 'aabbaaaabbbaababbaaabbbbbababbbabbb'
inputSeq = as.list(strsplit(stringSeq, "")[[1]])
totalRuns = lengths(rle(inputSeq))[[1]]
stringSeq = 'aabbaaaabbbaababbaaabbbbbababbbabbb'
inputSeq = as.list(strsplit(stringSeq, "")[[1]])
totalRuns = length(rle(inputSeq)$lengths)
?rle
totalRuns = rle(inputSeq)
stringSeq = 'aabbaaaabbbaababbaaabbbbbababbbabbb'
inputSeq = as.list(strsplit(stringSeq, "")[[1]])
totalRuns = str_count(inputSeq, 'a')
library(stringr)
stringSeq = 'aabbaaaabbbaababbaaabbbbbababbbabbb'
inputSeq = as.list(strsplit(stringSeq, "")[[1]])
totalRuns = str_count(inputSeq, 'a')
library(stringr)
stringSeq = 'aabbaaaabbbaababbaaabbbbbababbbabbb'
inputSeq = as.list(strsplit(stringSeq, "")[[1]])
convertedRuns = str_count(inputSeq, 'a')
totalRuns = length(rle(convertedRuns)$lengths)
runLength = rle(convertedRuns)
View(runLength)
runLength[["lengths"]]
library(stringr)
library(randtests)
install.packages("randtests")
library(stringr)
library(randtests)
stringSeq = 'aabbaaaabbbaababbaaabbbbbababbbabbb'
inputSeq = as.list(strsplit(stringSeq, "")[[1]])
convertedRuns = str_count(inputSeq, 'a') # convert to 1s and 0s to work with RLE
runLength = rle(convertedRuns)
totalRuns = length(rle(convertedRuns)$lengths)
runs.tests(convertedRuns)
library(randtests)
runs.tests(convertedRuns)
library(stringr)
stringSeq = 'aabbaaaabbbaababbaaabbbbbababbbabbb'
inputSeq = as.list(strsplit(stringSeq, "")[[1]])
convertedRuns = str_count(inputSeq, 'a') # convert to 1s and 0s to work with RLE
runLength = rle(convertedRuns)
totalRuns = length(rle(convertedRuns)$lengths)
wawotest(convertedRuns)
install.packages("adehabitatLT")
library(stringr)
library(adehabitatLT)
stringSeq = 'aabbaaaabbbaababbaaabbbbbababbbabbb'
inputSeq = as.list(strsplit(stringSeq, "")[[1]])
convertedRuns = str_count(inputSeq, 'a') # convert to 1s and 0s to work with RLE
runLength = rle(convertedRuns)
totalRuns = length(rle(convertedRuns)$lengths)
wawotest(convertedRuns)
library(stringr)
library(adehabitatLT)
stringSeq = 'aabbaaaabbbaababbaaabbbbbababbbabbb'
inputSeq = as.list(strsplit(stringSeq, "")[[1]])
convertedRuns = str_count(inputSeq, 'a') # convert to 1s and 0s to work with RLE
runLength = rle(convertedRuns)
totalRuns = length(rle(convertedRuns)$lengths)
wawotest(convertedRuns, "two-sided")
library(stringr)
library(adehabitatLT)
stringSeq = 'aabbaaaabbbaababbaaabbbbbababbbabbb'
inputSeq = as.list(strsplit(stringSeq, "")[[1]])
convertedRuns = str_count(inputSeq, 'a') # convert to 1s and 0s to work with RLE
runLengths = rle(convertedRuns)
totalRuns = length(rle(convertedRuns)$lengths)
wawotest(convertedRuns)
library(stringr)
library(adehabitatLT)
stringSeq = 'aabbaaaabbbaababbaaabbbbbababbbabbb'
inputSeq = as.list(strsplit(stringSeq, "")[[1]])
convertedRuns = str_count(inputSeq, 'a') # convert to 1s and 0s to work with RLE
runLengths = rle(convertedRuns)
totalRuns = length(rle(convertedRuns)$lengths)
wawotest(convertedRuns)
library(stringr)
library(adehabitatLT)
stringSeq = 'aabbaaaabbbaababbaaabbbbbababbbabbb'
inputSeq = as.list(strsplit(stringSeq, "")[[1]])
convertedRuns = str_count(inputSeq, 'a') # convert to 1s and 0s to work with RLE
runLengths = rle(convertedRuns)
totalRuns = length(rle(convertedRuns)$lengths)
pv = (2 * choose(7, ((totalRuns/2) - 1)) *  choose(7, ((totalRuns/2) - 1)))/(choose(8+8), 8)
library(stringr)
library(adehabitatLT)
stringSeq = 'aabbaaaabbbaababbaaabbbbbababbbabbb'
inputSeq = as.list(strsplit(stringSeq, "")[[1]])
convertedRuns = str_count(inputSeq, 'a') # convert to 1s and 0s to work with RLE
runLengths = rle(convertedRuns)
totalRuns = length(rle(convertedRuns)$lengths)
pv = 2 * choose(7, ((totalRuns/2) - 1)) *  choose(7, ((totalRuns/2) - 1))/(choose(8 + 8), 8)
library(stringr)
library(adehabitatLT)
stringSeq = 'aabbaaaabbbaababbaaabbbbbababbbabbb'
inputSeq = as.list(strsplit(stringSeq, "")[[1]])
convertedRuns = str_count(inputSeq, 'a') # convert to 1s and 0s to work with RLE
runLengths = rle(convertedRuns)
totalRuns = length(rle(convertedRuns)$lengths)
pv = 2 * choose(7, ((totalRuns/2) - 1)) *  choose(7, ((totalRuns/2) - 1))/choose(8 + 8), 8)
aChoose = choose(7,(totalRuns/2)-1)
library(stringr)
library(adehabitatLT)
stringSeq = 'aabbaaaabbbaababbaaabbbbbababbbabbb'
inputSeq = as.list(strsplit(stringSeq, "")[[1]])
convertedRuns = str_count(inputSeq, 'a') # convert to 1s and 0s to work with RLE
runLengths = rle(convertedRuns)
totalRuns = length(rle(convertedRuns)$lengths)
aChoose = choose(7,(totalRuns/2)-1)
bChoose = choose(7,(totalRuns/2)-1)
pv = 2 * aChoose * bChoose/choose(8 + 8), 8)
abChoose = choose((8+8), 8)
library(stringr)
library(adehabitatLT)
stringSeq = 'aabbaaaabbbaababbaaabbbbbababbbabbb'
inputSeq = as.list(strsplit(stringSeq, "")[[1]])
convertedRuns = str_count(inputSeq, 'a') # convert to 1s and 0s to work with RLE
runLengths = rle(convertedRuns)
totalRuns = length(rle(convertedRuns)$lengths)
aChoose = choose(7,(totalRuns/2)-1)
bChoose = choose(7,(totalRuns/2)-1)
abChoose = choose((8+8), 8)
pv = 2 * aChoose * bChoose/abChoose
wawotest(convertedRuns)
library(stringr)
library(adehabitatLT)
stringSeq = 'aabbaaaabbbaababbaaabbbbbababbbabbb'
inputSeq = as.list(strsplit(stringSeq, "")[[1]])
convertedRuns = str_count(inputSeq, 'a') # convert to 1s and 0s to work with RLE
runLengths = rle(convertedRuns)
totalRuns = length(rle(convertedRuns)$lengths)
aChoose = choose(7,(totalRuns/2)-1)
bChoose = choose(7,(totalRuns/2)-1)
abChoose = choose((8+8), 8)
pv = (2 * aChoose * bChoose)/abChoose
wawotest(convertedRuns)
pv
library(stringr)
stringSeq = 'aabbaaaabbbaababbaaabbbbbababbbabbb'
inputSeq = as.list(strsplit(stringSeq, "")[[1]])
convertedRuns = str_count(inputSeq, 'a') # convert to 1s and 0s to work with RLE
runLengths = rle(convertedRuns)
totalRuns = length(rle(convertedRuns)$lengths)
aChoose = choose(7,(totalRuns/2) - 1)
bChoose = choose(7,(totalRuns/2) - 1)
abChoose = choose((8+8), 8)
pv = (2 * aChoose * bChoose)/abChoose
pv
knitr::opts_chunk$set(echo = TRUE)
library(dplyr)
library(ggplot2)
wawotest(convertedRuns)
knitr::opts_chunk$set(echo = TRUE)
library(dplyr)
library(ggplot2)
library(stringr)
library(adehabitatLT)
stringSeq = 'aabbaaaabbbaababbaaabbbbbababbbabbb'
inputSeq = as.list(strsplit(stringSeq, "")[[1]])
convertedRuns = str_count(inputSeq, 'a') # convert to 1s and 0s to work with RLE
runLengths = rle(convertedRuns)
totalRuns = length(rle(convertedRuns)$lengths)
aChoose = choose(7,(totalRuns/2) - 1)
bChoose = choose(7,(totalRuns/2) - 1)
abChoose = choose((8+8), 8)
pv = (2 * aChoose * bChoose)/abChoose
pv
library(stringr)
library(adehabitatLT)
stringSeq = 'aabbaaaabbbaababbaaabbbbbababbbabbb'
inputSeq = as.list(strsplit(stringSeq, "")[[1]])
convertedRuns = str_count(inputSeq, 'a') # convert to 1s and 0s to work with RLE
runLengths = rle(convertedRuns)
totalRuns = length(rle(convertedRuns)$lengths)
aChoose = choose(7,(totalRuns/2) - 1)
bChoose = choose(7,(totalRuns/2) - 1)
abChoose = choose((8+8), 8)
pv = (2 * aChoose * bChoose)/abChoose
pv
wawotest(convertedRuns)
