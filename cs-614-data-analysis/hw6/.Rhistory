knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(EnvStats)
install.packages("EnvStats")
install.packages(c("ade4", "backports", "broom", "callr", "cli", "colorspace", "cpp11", "data.table", "dbplyr", "Deriv", "digest", "generics", "ggvis", "globals", "gplots", "isoband", "ISOcodes", "lgr", "lme4", "lubridate", "magrittr", "NLP", "pillar", "processx", "ps", "R6", "rgdal", "rlang", "rmarkdown", "rprojroot", "rstudioapi", "slam", "sparklyr", "stopwords", "testthat", "tinytex", "tm", "vctrs", "vegan", "xfun"))
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(EnvStats)
library(mice)
install.packages("mice")
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(EnvStats)
library(mice)
load('HW6.RData')
scorePlot = boxplot(demo$Prof_Score)
scoreOutliers = scorePlot%out
scoreOutliers = scorePlot4out
scoreOutliers = scorePlot$out
scorePlot = boxplot(demo$Prof_Score)
scoreOutliers = scorePlot$out
outlierMin = min(scoreOutliers)
outlierMAx = max(scoreOutliers)
scoreBreaks[0]
scorePlot = boxplot(demo$Prof_Score)
scoreOutliers = scorePlot$out
scoreBreaks = scorePlot$stats
outlierMin = min(scoreOutliers)
outlierMAx = max(scoreOutliers)
scoreBreaks[0]
tail(scoreBreaks, n=1)
View(scoreBreaks)
first(scoreBreaks)
last(scoreBreaks)
scorePlot = boxplot(demo$Prof_Score)
scoreOutliers = scorePlot$out
scoreBreaks = scorePlot$stats
outlierMin = min(scoreOutliers)
outlierMAx = max(scoreOutliers)
minRange = c(outlierMin, first(scoreBreaks))
maxRange = c(outlierMax, last(scoreBreaks))
scorePlot = boxplot(demo$Prof_Score)
scoreOutliers = scorePlot$out
scoreBreaks = scorePlot$stats
outlierMin = min(scoreOutliers)
outlierMax = max(scoreOutliers)
minRange = c(outlierMin, first(scoreBreaks))
maxRange = c(outlierMax, last(scoreBreaks))
minRange
maxRange
minRange = c(outlierMin, first(scoreBreaks))
maxRange = c(last(scoreBreaks), outlierMax)
minRage
minRange = c(outlierMin, first(scoreBreaks))
maxRange = c(last(scoreBreaks), outlierMax)
minRage
minRange = c(outlierMin, first(scoreBreaks))
maxRange = c(last(scoreBreaks), outlierMax)
minRange
maxRange
outlierCount = length(scoreOutliers)
plot(density(demo$Prof_Score))
scoreSd = sd(demo$Prof_Score)
plot(density(demo$Prof_Score))
scoreSd = sd(demo$Prof_Score)
scoreMean = mean(demo$Prof_Score)
upper = scoreMean - 3*scoreSd
lower = scoreMean + 3*scoreSd
upperOut = demo$Prof_Score > upper
lowerOut = scoreMean < lower
sdUpperOutliers = demo$Prof_Score[upperOut]
sdLowerOutliers = demo$Prof_Score[lowerOut]
sdOutliers = c(sdLowerOutliers, sdUpperOutliers)
sdOutliers
upperOut
plot(density(demo$Prof_Score))
scoreSd = sd(demo$Prof_Score)
scoreMean = mean(demo$Prof_Score)
upper = scoreMean + 3*scoreSd
lower = scoreMean - 3*scoreSd
upperOut = demo$Prof_Score  upper
plot(density(demo$Prof_Score))
scoreSd = sd(demo$Prof_Score)
scoreMean = mean(demo$Prof_Score)
upper = scoreMean + 3*scoreSd
lower = scoreMean - 3*scoreSd
upperOut = demo$Prof_Score > upper
lowerOut = scoreMean < lower
sdUpperOutliers = demo$Prof_Score[upperOut]
sdLowerOutliers = demo$Prof_Score[lowerOut]
sdOutliers = c(sdLowerOutliers, sdUpperOutliers)
sdOutliers
upperOut
scoreMean
scoreSd
upper
3*scoreSd
.1970173 + scoreMean
lower
lower - .1970713
mean(demo$Prof_Score)
lowerOut
plot(density(demo$Prof_Score))
scoreSd = sd(demo$Prof_Score)
scoreMean = mean(demo$Prof_Score)
upper = scoreMean + (3*scoreSd)
lower = scoreMean - (3*scoreSd)
upperOut = demo$Prof_Score > upper
lowerOut = demo$Prof_Score < lower
sdUpperOutliers = demo$Prof_Score[upperOut]
sdLowerOutliers = demo$Prof_Score[lowerOut]
sdOutliers = c(sdLowerOutliers, sdUpperOutliers)
sdOutliers
sdOutliers = c(sdLowerOutliers, sdUpperOutliers)
sdOutliers
ggplot(demo, aes=(Prof_Score))+geom_vline(xintercept = lower, color='red')+geom_vline(xintercept = upper, color='red')+geom_vline(xintercept = scoreMean, color='red')
sdOutliers = c(sdLowerOutliers, sdUpperOutliers)
sdOutliers
ggplot(demo, aes=(x=Prof_Score))+geom_vline(xintercept = lower, color='red')+geom_vline(xintercept = upper, color='red')+geom_vline(xintercept = scoreMean, color='red')
sdOutliers = c(sdLowerOutliers, sdUpperOutliers)
sdOutliers
ggplot(demo, aes=(x=Prof_Score)) +
geom_histogram() +
geom_vline(xintercept = lower, color='red') +
geom_vline(xintercept = upper, color='red') +
geom_vline(xintercept = scoreMean, color='red')
sdOutliers = c(sdLowerOutliers, sdUpperOutliers)
sdOutliers
ggplot(demo, aes(x=Prof_Score)) +
geom_histogram() +
geom_vline(xintercept = lower, color='red') +
geom_vline(xintercept = upper, color='red') +
geom_vline(xintercept = scoreMean, color='red')
sdOutliers = c(sdLowerOutliers, sdUpperOutliers)
sdOutliers
sdOutlierRange = c(min(sdOutliers), max(sdOutliers))
sdOutlierRange
length(sdOutliers)
ggplot(demo, aes(x=Prof_Score)) +
geom_histogram() +
geom_vline(xintercept = lower, color='red') +
geom_vline(xintercept = upper, color='red') +
geom_vline(xintercept = scoreMean, color='red')
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(EnvStats)
library(mice)
library(outliers)
install.packages("outliers")
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(EnvStats)
library(mice)
library(outliers)
load('HW6.RData')
gTest = grubbs.test(demo$Prof_Score)
View(gTest)
gTest
gTest$alternative
scores = demo$Prof_Score
gTest = grubbs.test(scores)
gOut = c()
while (gTest$p.value < 0.05)
{
altValue = gTest$alternative
altValue = as.numeric(strsplit(altValue," ")[[1]][3])
append(gOut, altValue)
scores = scores[!scores %in% altValue]
#run test again to find more outliers
gTest = grubbs.test(scores)
}
scores = demo$Prof_Score
gTest = grubbs.test(scores)
gOut = c()
while (gTest$p.value < 0.05)
{
altValue = gTest$alternative
altValue = as.numeric(strsplit(altValue," ")[[1]][3])
gOut = append(gOut, altValue)
scores = scores[!scores %in% altValue]
#run test again to find more outliers
gTest = grubbs.test(scores)
}
gRange = c(min(gOut), max(gOut))
gRange
lenght(gOut)
length(gOut)
gRange
View(gTest)
missingRecords = which(is.na(df))
missingRecords
completeRecords = complete.cases(df)
totalMissing = nrow(df) - sum(completeRecords)
for (Var in names(df)) {
#list to hold indexes of NAs
NA_indexes = c()
#check if there is a NA in each index
for (i in 1:length(df[,Var]))
{
#if there is a NA, append to the NA_index list
if(is.na(df[,Var][i]))
{
NA_indexes = c(NA_indexes,i)
}
#rename this vector to the "column name"_NAs
assign(paste(Var,"_NAs",sep=""), NA_indexes)
}
missingRecords = which(is.na(df))
completeRecords = df[complete.cases(df)]
missingRecords = which(is.na(df))
completeRecords = df[,complete.cases(df)]
completeRecords = df[c(complete.cases(df))]
missingRecords = which(is.na(df))
completeRecords = complete.cases(df)
totalMissing = nrow(df) - nrow(completeRecords)
for (Var in names(df)) {
#list to hold indexes of NAs
NA_indexes = c()
#check if there is a NA in each index
for (i in 1:length(df[,Var]))
{
#if there is a NA, append to the NA_index list
if(is.na(df[,Var][i]))
{
NA_indexes = c(NA_indexes,i)
}
#rename this vector to the "column name"_NAs
assign(paste(Var,"_NAs",sep=""), NA_indexes)
}
missingRecords = which(is.na(df))
completeRecords = df[complete.cases(df),]
totalMissing = nrow(df) - nrow(completeRecords)
for (Var in names(df)) {
#list to hold indexes of NAs
NA_indexes = c()
#check if there is a NA in each index
for (i in 1:length(df[,Var]))
{
#if there is a NA, append to the NA_index list
if(is.na(df[,Var][i]))
{
NA_indexes = c(NA_indexes,i)
}
#rename this vector to the "column name"_NAs
assign(paste(Var,"_NAs",sep=""), NA_indexes)
}
colSums(is.na(df))
df$Image_QualityNA = as.factor(ifelse(is.na(df$Image_Quality),1,0))
df$SmileNA = as.factor(ifelse(is.na(df$Smile),1,0))
df$SmileNA
levels(df$SmileNA)
df$Image_QualityNA
df$Image_QualityNA = as.factor(ifelse(is.na(df$Image_Quality),1,0))
df$SmileNA = as.factor(ifelse(is.na(df$Smile),1,0))
rForestImage = randomForest(Image_QualityNA ~ ., data = df[-c(4,9,11,12)])
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(EnvStats)
library(mice)
library(outliers)
load('HW6.RData')
install.packages("randomForest")
library(randomForest)
df$Image_QualityNA = as.factor(ifelse(is.na(df$Image_Quality),1,0))
df$SmileNA = as.factor(ifelse(is.na(df$Smile),1,0))
rForestImage = randomForest(Image_QualityNA ~ ., data = df[-c(4,9,11,12)])
df$Image_QualityNA = as.factor(ifelse(is.na(df$Image_Quality),1,0))
df$SmileNA = as.factor(ifelse(is.na(df$Smile),1,0))
rForestImage = randomForest(Image_QualityNA ~ ., data = df[-c(4,9,12)])
df$Image_QualityNA = as.factor(ifelse(is.na(df$Image_Quality),1,0))
df$SmileNA = as.factor(ifelse(is.na(df$Smile),1,0))
rForestImage = randomForest(Image_QualityNA ~ ., data = df[-c(5,10,13)])
rForestImage
df[0,]
df[,0]
df[,1]
predict(rForestImage)
sum(df$Image_QualityNA != predict(rForestImage))
predictedImageProb = predictedMissingImage/798
df$Image_QualityNA = as.factor(ifelse(is.na(df$Image_Quality),1,0))
df$SmileNA = as.factor(ifelse(is.na(df$Smile),1,0))
rForestImage = randomForest(Image_QualityNA ~ ., data = df[-c(5,10,13)])
predictedMissingImage = sum(df$Image_QualityNA != predict(rForestImage))
predictedImageProb = predictedMissingImage/798
predictedMissingImage = sum(df$Image_QualityNA != predict(rForestImage)/nrow(df))
predictedMissingImage = sum(df$Image_QualityNA != predict(rForestImage))/nrow(df)
rForestImage
rForestImage$err.rate
rForestImage
df$Image_QualityNA = as.factor(ifelse(is.na(df$Image_Quality),1,0))
df$SmileNA = as.factor(ifelse(is.na(df$Smile),1,0))
rForestImage = randomForest(Image_QualityNA ~ ., data = df[-c(5,10,13)])
rForestImage
rForestSmile = randomForest(Image_QualityNA ~ ., data = df[-c(5,10,12)])
df$Image_QualityNA = as.factor(ifelse(is.na(df$Image_Quality),1,0))
df$SmileNA = as.factor(ifelse(is.na(df$Smile),1,0))
rForestImage = randomForest(Image_QualityNA ~ ., data = df[-c(5,10,13)])
rForestImage
rForestSmile = randomForest(SmileNA ~ ., data = df[-c(5,10,12)])
rForestSmile
df = df[-c(12,13)]
dfListDeletion = df[-c(is.na(df$Image_Quality),is.na(df$Smile)),]
imageNa = is.na(df$Image_Quality)
smileNA = is.na(df$Smile)
dfListDeletion = df[-c(imageNa,smileNa),]
df = df[-c(12,13)]
imageNa = is.na(df$Image_Quality)
smileNa = is.na(df$Smile)
dfListDeletion = df[-c(imageNa,smileNa),]
df = df[-c(12,13)]
imageNa = is.na(df$Image_Quality)
smileNa = is.na(df$Smile)
dfListDeletion = df[-c(imageNa),]
df = df[-c(12,13)]
imageNa = is.na(df$Image_Quality)
smileNa = is.na(df$Smile)
dfListDeletion = df[-c(imageNa),]
df = df[-c(12,13)]
imageNa = is.na(df$Image_Quality)
smileNa = is.na(df$Smile)
dfListDeletion = df[-c(imageNa)]
df = df[-c(12,13)]
dfList = df[complete.cases(df),]
is.na(dfList)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(EnvStats)
library(mice)
library(outliers)
library(randomForest)
load('HW6.RData')
scorePlot = boxplot(demo$Prof_Score)
scoreOutliers = scorePlot$out
scoreBreaks = scorePlot$stats
outlierMin = min(scoreOutliers)
outlierMax = max(scoreOutliers)
minRange = c(outlierMin, first(scoreBreaks))
maxRange = c(last(scoreBreaks), outlierMax)
outlierCount = length(scoreOutliers)
minRange
maxRange
outlierCount
plot(density(demo$Prof_Score))
scoreSd = sd(demo$Prof_Score)
scoreMean = mean(demo$Prof_Score)
upper = scoreMean + (3*scoreSd)
lower = scoreMean - (3*scoreSd)
upperOut = demo$Prof_Score > upper
lowerOut = demo$Prof_Score < lower
sdUpperOutliers = demo$Prof_Score[upperOut]
sdLowerOutliers = demo$Prof_Score[lowerOut]
ggplot(demo, aes(x=Prof_Score)) +
geom_histogram() +
geom_vline(xintercept = lower, color='red') +
geom_vline(xintercept = upper, color='red') +
geom_vline(xintercept = scoreMean, color='red')
sdOutliers = c(sdLowerOutliers, sdUpperOutliers)
sdOutliers
sdOutlierRange = c(min(sdOutliers), max(sdOutliers))
sdOutlierRange
length(sdOutliers)
scores = demo$Prof_Score
gTest = grubbs.test(scores)
gOut = c()
while (gTest$p.value < 0.05)
{
altValue = gTest$alternative
altValue = as.numeric(strsplit(altValue," ")[[1]][3])
gOut = append(gOut, altValue)
scores = scores[!scores %in% altValue]
gTest = grubbs.test(scores)
}
gRange = c(min(gOut), max(gOut))
gRange
length(gOut)
missingValuesByColumn = colSums(is.na(df))
df$Image_QualityNA = as.factor(ifelse(is.na(df$Image_Quality),1,0))
df$SmileNA = as.factor(ifelse(is.na(df$Smile),1,0))
rForestImage = randomForest(Image_QualityNA ~ ., data = df[-c(5,10,13)])
rForestImage
rForestSmile = randomForest(SmileNA ~ ., data = df[-c(5,10,12)])
rForestSmile
df = df[-c(12,13)]
dfListDelete = df[complete.cases(df),]
df = df[-c(12,13)]
dfListDelete = df[complete.cases(df),]
imputeModel = mice(df, maxit=0)
imputePredictions = imputeModel$predictorMatrix
dfMultipleImpute = mice(df, maxit=5, predictorMatrix = imputePredictions, method = imputeModel$method, print=FALSE)
complete(dfMultipleImpute,1)
df = df[-c(12,13)]
dfListDelete = df[complete.cases(df),]
imputeModel = mice(df, maxit=0)
imputePredictions = imputeModel$predictorMatrix
dfMultipleImpute = mice(df, maxit=5, predictorMatrix = imputePredictions, method = imputeModel$method, print=FALSE)
dfImputeComplete = complete(dfMultipleImpute,1)
summary(glm(Area~., data = dfListDelete))
summary(glm(Area~., data = dfImputeComplete))
install.packages("xfun")
